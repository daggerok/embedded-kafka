buildscript {
  ext {
    javaVersion = "1.8"
    kotlinVersion = "1.2.21"
    vavrVersion = "0.9.2"
    slf4jVersion = "1.7.25"
    lombokVersion = "1.16.20"
    branchName = "mvn-repo"
    mvnRepoDir = "$buildDir/$branchName"
    javaVersion = "1.8"
    vavrVersion = "0.9.2"
    kotlinVersion = "1.2.21"
    springBootVersion = "2.0.0.RC1"
    springCloudVersion = "Finchley.M6"
    hibernateCoreVersion = "4.2.18.Final"
    junitPlatformVersion = "1.0.2"
    junitJupiterVersion = "5.0.2"
  }
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
  }
}

plugins {
  id "idea"
  id "java"
  id "maven"
  id "eclipse"
  id "maven-publish" // ./gradlew publish
  id "org.jetbrains.kotlin.jvm" version "1.2.21"
  id "org.ajoberstar.git-publish" version "0.2.2"
  id "com.avast.gradle.docker-compose" version "0.6.13"
  id "org.jetbrains.kotlin.plugin.noarg" version "1.2.21"
  id "org.jetbrains.kotlin.plugin.spring" version "1.2.21"
  id "org.jetbrains.kotlin.plugin.allopen" version "1.2.21"
  id "io.spring.dependency-management" version "1.0.4.RELEASE"
}

apply plugin: "org.springframework.boot"

group = "daggerok"
version = "0.0.2"
sourceCompatibility = targetCompatibility = "$javaVersion"

compileKotlin {
  incremental = true
  kotlinOptions {
    freeCompilerArgs = ["-Xjsr305=strict"]
    jvmTarget = "$javaVersion"
  }
}

compileTestKotlin {
  incremental = true
  kotlinOptions {
    freeCompilerArgs = ["-Xjsr305=strict"]
    jvmTarget = "$javaVersion"
  }
}

allOpen {
  annotation("javax.persistence.Entity")
}

noArg {
  annotation("javax.persistence.Entity")
}

defaultTasks "clean", "build"

repositories {
  mavenLocal()
  mavenCentral()
  maven { url "https://repo.spring.io/snapshot" }
  maven { url "https://repo.spring.io/milestone" }
}

dependencies {
  compile("org.springframework.boot:spring-boot-starter-webflux")
  compile("org.springframework.kafka:spring-kafka-test")
  compile("io.vavr:vavr:$vavrVersion")
  compileOnly("org.projectlombok:lombok")
  testCompileOnly("org.projectlombok:lombok")
  compile("com.fasterxml.jackson.module:jackson-module-kotlin:2.9.4.1")
  compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")
  testCompile("org.jetbrains.kotlin:kotlin-test:$kotlinVersion")
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootVersion"
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
  }
}

bootJar {
  launchScript()
}

def profile = project.hasProperty("profile") ? project.getProperty("profile") : "gradle"

dockerCompose {
  useComposeFiles = [project.file("docker-compose-${profile}.yaml")]
  // captureContainersOutput = true
  captureContainersOutput = false
  stopContainers = true
  removeContainers = true
  removeImages = "Local"
  removeVolumes = true
  removeOrphans = true
  forceRecreate = true
  waitForTcpPorts = false
  projectName = project.name
}

composeUp.dependsOn assemble

task wrapper(type: Wrapper) {
  gradleVersion = "4.5.1"
  distributionType = "ALL"
}

test {
  systemProperties "property": "value"
}

// maven-publish

task sourceJar(type: Jar) {
  from sourceSets.main.allJava
}

publishing {
  repositories {
    maven {
      // change to point to your repo, e.g. http://my.org/repo
      url "$mvnRepoDir"
    }
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
}

task travisYaml(type: Copy, dependsOn: publish) {
  from ".travis.yml"
  into "$mvnRepoDir"
}

gitPublish {

  // where to publish to (repo must exist)
  repoUri = "git@github.com:daggerok/embedded-kafka.git"

  // branch will be created if it doesn"t exist
  branch = "$branchName"

  contents {
    from "$projectDir/.travis.yml"
    from ("$mvnRepoDir") {
//    from "$mvnRepoDir"
//    from (javadoc) {
      into "."
    }
  }

  // message used when committing changes
  commitMessage = "Gradle artifacts for ${project.group}:${project.name}:$project.version" // defaults to "Generated by gradle-git-publish"
}

task deploy(dependsOn: gitPublishPush)
