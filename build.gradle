buildscript {
  ext {
    javaVersion = "1.8"
    kotlinVersion = "1.2.21"
    vavrVersion = "0.9.2"
    slf4jVersion = "1.7.25"
    lombokVersion = "1.16.20"
    branchName = "mvn-repo"
    mvnRepoDir = "$buildDir/$branchName"
  }
  repositories {
    mavenLocal()
    mavenCentral()
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
  }
}

plugins {
  id "idea"
  id "java"
  id "maven"
  id "application"
  id "maven-publish" // ./gradlew publish
  id "org.ajoberstar.git-publish" version "0.2.2"
  id "com.github.johnrengelman.shadow" version "2.0.2"
}

apply plugin: "kotlin"

version "0.0.1"
group "daggerok"
sourceCompatibility = targetCompatibility = javaVersion

mainClassName = "daggerok.App"
shadowJar.classifier = ""
shadowJar.mustRunAfter jar
jar.enabled = false

repositories {
  mavenLocal()
  mavenCentral()
}

dependencies {
//    kafka-unit 1.0: Kafka broker kafka_2.11:0.11.0.0 + Zookeeper 3.4.10
  compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion",
      "info.batey.kafka:kafka-unit:0.7",
      "io.vavr:vavr:$vavrVersion"
  compile "org.slf4j:slf4j-api:$slf4jVersion"
  compile "org.slf4j:jul-to-slf4j:$slf4jVersion"
  compile "org.slf4j:log4j-over-slf4j:$slf4jVersion"
  compile "ch.qos.logback:logback-classic:1.2.3"
  compileOnly "org.projectlombok:lombok:$lombokVersion"
}

compileKotlin {
  kotlinOptions.jvmTarget = javaVersion
}

compileTestKotlin {
  kotlinOptions.jvmTarget = javaVersion
}

defaultTasks "clean", "build"

// maven-publish

task sourceJar(type: Jar) {
  from sourceSets.main.allJava
}

publishing {
  repositories {
    maven {
      // change to point to your repo, e.g. http://my.org/repo
      url "$mvnRepoDir"
    }
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
}

task travisYaml(type: Copy, dependsOn: publish) {
  from ".travis.yml"
  into "$mvnRepoDir"
}

gitPublish {

  // where to publish to (repo must exist)
  repoUri = "git@github.com:daggerok/embedded-kafka.git"

  // branch will be created if it doesn"t exist
  branch = "$branchName"

  contents {
    from "$projectDir/.travis.yml"
    from ("$mvnRepoDir") {
//    from "$mvnRepoDir"
//    from (javadoc) {
      into "."
    }
  }

  // message used when committing changes
  commitMessage = "Gradle artifacts for ${project.group}:${project.name}:$project.version" // defaults to "Generated by gradle-git-publish"
}

task deploy(dependsOn: gitPublishPush)
