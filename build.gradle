buildscript {
  ext {
    javaVersion = "1.8"
    kotlinVersion = "1.2.21"
    slf4jVersion = "1.7.25"
    branchName = "mvn-repo"
    mvnRepoDir = "$buildDir/$branchName"
  }
}

plugins {
  id "idea"
  id "java"
  id "maven"
  id "eclipse"
  id "application"
  id "maven-publish" // ./gradlew publish
  id "org.jetbrains.kotlin.jvm" version "1.2.21"
  id "org.ajoberstar.git-publish" version "0.2.2"
  id "com.github.johnrengelman.shadow" version "2.0.2"
  id "com.avast.gradle.docker-compose" version "0.6.13"
  id "org.jetbrains.kotlin.plugin.noarg" version "1.2.21"
  id "org.jetbrains.kotlin.plugin.spring" version "1.2.21"
  id "org.jetbrains.kotlin.plugin.allopen" version "1.2.21"
}

mainClassName = "daggerok.App"
shadowJar.mustRunAfter jar

group = "daggerok"
version = "0.0.3"
sourceCompatibility = targetCompatibility = "$javaVersion"

/*
kotlin {
  experimental {
    coroutines "enable"
  }
}
*/

def incr = true

compileKotlin {
  incremental = incr
  kotlinOptions {
    freeCompilerArgs = ["-Xjsr305=strict"]
    jvmTarget = "$javaVersion"
  }
}

compileTestKotlin {
  incremental = incr
  kotlinOptions {
    freeCompilerArgs = ["-Xjsr305=strict"]
    jvmTarget = "$javaVersion"
  }
}

defaultTasks "clean", "build", "installDist", "distZip"

repositories {
  mavenLocal()
  mavenCentral()
}

dependencies {
  compile("org.apache.curator:curator-test:4.0.1") {
    exclude module: "slf4j-log4j12"
    exclude module: "logback-classic"
  }
  compile("org.apache.zookeeper:zookeeper:3.4.10") {
    exclude module: "slf4j-log4j12"
    exclude module: "logback-classic"
  }
  compile("org.apache.kafka:kafka_2.12:1.0.0") {
    exclude module: "slf4j-log4j12"
    exclude module: "logback-classic"
  }
  compile "org.slf4j:slf4j-api:$slf4jVersion"
  compile "ch.qos.logback:logback-classic:1.2.3"
  compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")
  //compile("org.jetbrains.kotlinx:kotlinx-coroutines-core:0.21")
}

def profile = project.hasProperty("profile") ? project.getProperty("profile") : "gradle"

dockerCompose {
  useComposeFiles = [project.file("docker-compose-${profile}.yaml")]
  // captureContainersOutput = true
  captureContainersOutput = false
  stopContainers = true
  removeContainers = true
  removeImages = "Local"
  removeVolumes = true
  removeOrphans = true
  forceRecreate = true
  waitForTcpPorts = false
  projectName = project.name
}

composeUp.dependsOn assemble

task wrapper(type: Wrapper) {
  gradleVersion = "4.6-rc-2"
  distributionType = "ALL"
}

test {
  systemProperties "property": "value"
}

clean.doFirst {
  ["out"].each {
    delete "$projectDir/out"
  }
}

// maven-publish

task sourceJar(type: Jar) {
  from sourceSets.main.allJava
}

publishing {
  repositories {
    maven {
      // change to point to your repo, e.g. http://my.org/repo
      url "$mvnRepoDir"
    }
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
}

gitPublish {

  // where to publish to (repo must exist)
  repoUri = "git@github.com:daggerok/embedded-kafka.git"

  // branch will be created if it doesn"t exist
  branch = "$branchName"

  contents {
    from "$projectDir/src/main/travis/.nojekyll"
    from "$projectDir/src/main/travis/.travis.yml"
    from "$buildDir/libs/$shadowJar.archiveName"
    from ("$mvnRepoDir") {
    //from (javadoc) {
      include "**/*.*"
      into "."
    }
  }

  // message used when committing changes
  commitMessage = "Gradle artifacts for ${project.group}:${project.name}:$project.version" // defaults to "Generated by gradle-git-publish"
}

task deploy(dependsOn: gitPublishPush)
gitPublishPush.dependsOn publish

//task copyFatJar(type: Copy) {
//  from "$buildDir/libs/$shadowJar.archiveName"
//  into "$mvnRepoDir"
//  include "**/*.*"
//}
//publish.dependsOn copyFatJar
